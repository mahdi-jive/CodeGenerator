
// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\Abstractions\IAssembly.cs ---
using CodeGenerator.FileSystem.Abstractions;
using System.Xml.Linq;

namespace CodeGenerator.Assembly.Abstractions
{
    public interface IAssembly : IDirectory
    {
        public string AssemblyName { get; }
        public XDocument Csproj { get; }
        public Task<XDocument> InitCsprojAsync(string targetFramework);
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\Abstractions\IAssembly.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\Abstractions\ICodeFile.cs ---
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace CodeGenerator.Assembly.Abstractions
{
    public interface ICodeFile
    {
        CompilationUnitSyntax CompilationUnit { get; }
        string ClassName { get; }
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\Abstractions\ICodeFile.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\Extensions\AssemblyExtensions.cs ---
using CodeGenerator.Assembly.Abstractions;
using CodeGenerator.FileSystem.Abstractions;

namespace CodeGenerator.Assembly.Extensions
{
    public static class AssemblyExtensions
    {
        public static async Task<IAssembly> CreateAssemblyAsync(
            this IDirectory parent,
            string assemblyName,
            string targetFramework = "net48")
        {
            var project = AssemblyProject.Create(parent.FullPath, assemblyName);
            await parent.AddDirectoryAsync(project.DirectoryName);
            return project;
        }
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\Extensions\AssemblyExtensions.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\obj\Debug\net9.0\.NETCoreApp,Version=v9.0.AssemblyAttributes.cs ---
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\obj\Debug\net9.0\.NETCoreApp,Version=v9.0.AssemblyAttributes.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\obj\Debug\net9.0\CodeGenerator.Assembly.AssemblyInfo.cs ---
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("CodeGenerator.Assembly")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("CodeGenerator.Assembly")]
[assembly: System.Reflection.AssemblyTitleAttribute("CodeGenerator.Assembly")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.


// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\obj\Debug\net9.0\CodeGenerator.Assembly.AssemblyInfo.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\obj\Debug\net9.0\CodeGenerator.Assembly.GlobalUsings.g.cs ---
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\obj\Debug\net9.0\CodeGenerator.Assembly.GlobalUsings.g.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\AssemblyProjectBase.cs ---
using CodeGenerator.Assembly.Abstractions;
using CodeGenerator.FileSystem.Abstractions;
using CodeGenerator.FileSystem.Physical;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using System.Xml.Linq;

namespace CodeGenerator.Assembly
{
    public abstract class AssemblyProjectBase : PhysicalDirectory, IAssembly
    {
        public IReadOnlyList<IFile> CsharpFiles => Files.Where(q => q.Extension == "cs").ToList().AsReadOnly();
        public string AssemblyName { get; private set; }
        public XDocument Csproj { get; private set; }

        protected AssemblyProjectBase(string fullPath, string relativePath, string assemblyName, XDocument csproj)
            : base(fullPath, relativePath)
        {
            AssemblyName = assemblyName;
            Csproj = csproj;
        }

        //public  static AssemblyProjectBase Create(string basePath, string assemblyName)
        //{
        //    var dir = CreateRoot(basePath, assemblyName);
        //    return new AssemblyProjectBase(dir.FullPath, dir.RelativePath, assemblyName);
        //}

        /// <summary>
        /// اضافه کردن کلاس جدید با namespace به صورت ساختاری و امن با Roslyn
        /// </summary>
        public async Task AddClassAsync(ICodeFile codeFile, string relativeFolder = "")
        {
            // ساخت فضای نام پایه: AssemblyName + فولدرهای زیرین (اگر بود)
            string namespaceName = AssemblyName;
            IDirectory directory = this;
            if (!string.IsNullOrEmpty(relativeFolder))
            {
                // نام فولدرها را تبدیل به فضای نام کن (مثلاً "Services/Helpers" => "Services.Helpers")
                var namespaceSuffix = relativeFolder.Replace(Path.DirectorySeparatorChar, '.').Replace(Path.AltDirectorySeparatorChar, '.');
                namespaceName += "." + namespaceSuffix;
                directory = await AddDirectoryAsync(relativeFolder);
            }

            // اصلاح فضای نام در CompilationUnitSyntax (فرض بر این است که فضای نام در AST باید جایگزین شود)
            var newNamespace = SyntaxFactory.NamespaceDeclaration(SyntaxFactory.ParseName(namespaceName))
                .WithMembers(codeFile.CompilationUnit.Members)
                .NormalizeWhitespace();

            var newCompilationUnit = SyntaxFactory.CompilationUnit()
                .AddMembers(newNamespace)
                .NormalizeWhitespace();

            string code = newCompilationUnit.ToFullString();

            // مسیر فایل در سیستم فایل:

            string fileName = codeFile.ClassName + ".cs";
            var file = await directory.AddFileAsync(fileName, code);

        }

        public abstract Task<XDocument> InitCsprojAsync(string targetFramework);

        ///// <summary>
        ///// ساخت فایل csproj به صورت XML ساختارمند با XDocument
        ///// </summary>
        //public async Task<XDocument> InitCsprojAsync(string targetFramework)
        //{
        //    var projectXml = new XDocument(
        //        new XElement("Project", new XAttribute("Sdk", "Microsoft.NET.Sdk"),
        //            new XElement("PropertyGroup",
        //                new XElement("TargetFramework", targetFramework),
        //    new XElement("AssemblyName", AssemblyName)
        //            )
        //        )
        //    );

        //    string csprojFileName = $"{AssemblyName}.csproj";
        //    string csprojFullPath = Path.Combine(FullPath, csprojFileName);
        //    MemoryStream stream = new MemoryStream();
        //    projectXml.Save(stream);

        //    await AddFileAsync(csprojFileName, stream);
        //}
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\AssemblyProjectBase.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\CodeFile.cs ---
using CodeGenerator.Assembly.Abstractions;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace CodeGenerator.Assembly
{
    public class CodeFile : ICodeFile
    {
        public CompilationUnitSyntax CompilationUnit { get; private set; }
        public string ClassName { get; private set; }

        public CodeFile(string className, CompilationUnitSyntax compilationUnit)
        {
            ClassName = className;
            CompilationUnit = compilationUnit;
        }
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\CodeFile.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly.NetFx48\obj\Debug\net9.0\.NETCoreApp,Version=v9.0.AssemblyAttributes.cs ---
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly.NetFx48\obj\Debug\net9.0\.NETCoreApp,Version=v9.0.AssemblyAttributes.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly.NetFx48\obj\Debug\net9.0\CodeGenerator.Assembly.NetFx48.AssemblyInfo.cs ---
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("CodeGenerator.Assembly.NetFx48")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("CodeGenerator.Assembly.NetFx48")]
[assembly: System.Reflection.AssemblyTitleAttribute("CodeGenerator.Assembly.NetFx48")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.


// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly.NetFx48\obj\Debug\net9.0\CodeGenerator.Assembly.NetFx48.AssemblyInfo.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly.NetFx48\obj\Debug\net9.0\CodeGenerator.Assembly.NetFx48.GlobalUsings.g.cs ---
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly.NetFx48\obj\Debug\net9.0\CodeGenerator.Assembly.NetFx48.GlobalUsings.g.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly.NetFx48\AssemblyProject.cs ---
using System.Xml.Linq;

namespace CodeGenerator.Assembly.NetFx48
{
    public class AssemblyProject : AssemblyProjectBase
    {

        private AssemblyProject(string fullPath, string relativePath, string assemblyName)
            : base(fullPath, relativePath, assemblyName)
        {
        }

        public static AssemblyProject Create(string basePath, string assemblyName)
        {
            var dir = CreateRoot(basePath, assemblyName);
            return new AssemblyProject(dir.FullPath, dir.RelativePath, assemblyName);
        }

        public override async Task<XDocument> InitCsprojAsync(string targetFramework)
        {
            var projectXml = new XDocument(
               new XElement("Project", new XAttribute("Sdk", "Microsoft.NET.Sdk"),
                   new XElement("PropertyGroup",
                       new XElement("TargetFramework", targetFramework),
                       new XElement("AssemblyName", AssemblyName)
                   )
               )
           );

            string csprojFileName = $"{AssemblyName}.csproj";
            string csprojFullPath = Path.Combine(FullPath, csprojFileName);
            MemoryStream stream = new MemoryStream();
            projectXml.Save(stream);
            await AddFileAsync(csprojFileName, stream);
        }
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly.NetFx48\AssemblyProject.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly.NetFx48\Class1.cs ---
namespace CodeGenerator.Assembly.NetFx48
{
    public class Class1
    {

    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly.NetFx48\Class1.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\DataLayerGenerator\obj\Debug\net9.0\.NETCoreApp,Version=v9.0.AssemblyAttributes.cs ---
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\DataLayerGenerator\obj\Debug\net9.0\.NETCoreApp,Version=v9.0.AssemblyAttributes.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\DataLayerGenerator\obj\Debug\net9.0\DataLayerGenerator.AssemblyInfo.cs ---
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("DataLayerGenerator")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("DataLayerGenerator")]
[assembly: System.Reflection.AssemblyTitleAttribute("DataLayerGenerator")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.


// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\DataLayerGenerator\obj\Debug\net9.0\DataLayerGenerator.AssemblyInfo.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\DataLayerGenerator\obj\Debug\net9.0\DataLayerGenerator.GlobalUsings.g.cs ---
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\DataLayerGenerator\obj\Debug\net9.0\DataLayerGenerator.GlobalUsings.g.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\DataLayerGenerator\Program.cs ---
internal class Program
{
}




// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\DataLayerGenerator\Program.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Abstractions\IDirectory.cs ---
namespace CodeGenerator.FileSystem.Abstractions
{
    public interface IDirectory : IFullPath, IRelativePath
    {
        string DirectoryName { get; }
        IReadOnlyList<IDirectory> Directories { get; }
        IReadOnlyList<IFile> Files { get; }

        Task<IDirectory> AddDirectoryAsync(string name);
        Task<IFile> AddFileAsync(string name, string content);
        Task<IFile> AddFileAsync(string name, byte[] content);
        Task<IFile> AddFileAsync(string name, Stream content);

        Task RenameAsync(string newName);
        Task DeleteAsync();
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Abstractions\IDirectory.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Abstractions\IFile.cs ---
namespace CodeGenerator.FileSystem.Abstractions
{
    public interface IFile : IFullPath, IRelativePath
    {
        string FileName { get; }
        string Extension { get; }
        Task RenameAsync(string newName);
        Task DeleteAsync();
        Task<Stream> OpenReadAsync();
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Abstractions\IFile.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Abstractions\IFullPath.cs ---
namespace CodeGenerator.FileSystem.Abstractions
{
    public interface IFullPath
    {
        string FullPath { get; }
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Abstractions\IFullPath.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Abstractions\IRelativePath.cs ---
namespace CodeGenerator.FileSystem.Abstractions
{
    public interface IRelativePath
    {
        string RelativePath { get; }
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Abstractions\IRelativePath.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\obj\Debug\net9.0\.NETCoreApp,Version=v9.0.AssemblyAttributes.cs ---
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\obj\Debug\net9.0\.NETCoreApp,Version=v9.0.AssemblyAttributes.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\obj\Debug\net9.0\CodeGenerator.FileSystem.AssemblyInfo.cs ---
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("CodeGenerator.FileSystem")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("CodeGenerator.FileSystem")]
[assembly: System.Reflection.AssemblyTitleAttribute("CodeGenerator.FileSystem")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.


// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\obj\Debug\net9.0\CodeGenerator.FileSystem.AssemblyInfo.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\obj\Debug\net9.0\CodeGenerator.FileSystem.GlobalUsings.g.cs ---
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\obj\Debug\net9.0\CodeGenerator.FileSystem.GlobalUsings.g.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\obj\Debug\net9.0\FileSystem.AssemblyInfo.cs ---
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("FileSystem")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("FileSystem")]
[assembly: System.Reflection.AssemblyTitleAttribute("FileSystem")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.


// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\obj\Debug\net9.0\FileSystem.AssemblyInfo.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\obj\Debug\net9.0\FileSystem.GlobalUsings.g.cs ---
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\obj\Debug\net9.0\FileSystem.GlobalUsings.g.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Physical\PhysicalDirectory.cs ---
using CodeGenerator.FileSystem.Abstractions;

namespace CodeGenerator.FileSystem.Physical
{
    public class PhysicalDirectory : IDirectory
    {
        public string DirectoryName { get; private set; }
        public string FullPath { get; private set; }
        public string RelativePath { get; private set; }

        private readonly List<PhysicalDirectory> _directories = new();
        private readonly List<PhysicalFile> _files = new();

        public IReadOnlyList<IDirectory> Directories => _directories.AsReadOnly();
        public IReadOnlyList<IFile> Files => _files.AsReadOnly();

        protected PhysicalDirectory(string fullPath, string relativePath)
        {
            FullPath = fullPath;
            RelativePath = relativePath;
            DirectoryName = Path.GetFileName(fullPath);
        }

        // فقط یک ریشه ایجاد می‌کنیم، بعد زیر مجموعه‌ها از این ریشه ساخته می‌شوند
        public static PhysicalDirectory CreateRoot(string basePath, string rootDirectoryName)
        {
            string rootFullPath = Path.Combine(basePath, rootDirectoryName);
            Directory.CreateDirectory(rootFullPath);
            return new PhysicalDirectory(rootFullPath, rootDirectoryName);
        }

        // اضافه کردن فولدر زیر مجموعه
        public async Task<IDirectory> AddDirectoryAsync(string name)
        {
            string newFullPath = Path.Combine(FullPath, name);
            Directory.CreateDirectory(newFullPath);

            string newRelativePath = Path.Combine(RelativePath, name);
            var newDir = new PhysicalDirectory(newFullPath, newRelativePath);

            _directories.Add(newDir);
            await Task.CompletedTask;
            return newDir;
        }

        public async Task<IFile> AddFileAsync(string fileName, string content)
        {
            byte[] bytes = System.Text.Encoding.UTF8.GetBytes(content);
            return await AddFileAsync(fileName, bytes);
        }

        public async Task<IFile> AddFileAsync(string fileName, byte[] content)
        {
            string fullPath = Path.Combine(FullPath, fileName);
            await File.WriteAllBytesAsync(fullPath, content);
            return new PhysicalFile(FullPath, fileName);
        }

        public async Task<IFile> AddFileAsync(string fileName, Stream content)
        {
            string fullPath = Path.Combine(FullPath, fileName);
            using var fileStream = new FileStream(fullPath, FileMode.Create, FileAccess.Write, FileShare.None);
            await content.CopyToAsync(fileStream);
            return new PhysicalFile(FullPath, fileName);
        }

        public async Task RenameAsync(string newName)
        {
            string parentDir = Path.GetDirectoryName(FullPath) ?? throw new InvalidOperationException("Parent directory not found.");
            string newFullPath = Path.Combine(parentDir, newName);

            Directory.Move(FullPath, newFullPath);
            FullPath = newFullPath;
            DirectoryName = newName;
            RelativePath = Path.Combine(Path.GetDirectoryName(RelativePath) ?? "", newName);

            await Task.CompletedTask;
        }

        public async Task DeleteAsync()
        {
            if (Directory.Exists(FullPath))
                Directory.Delete(FullPath, true);

            await Task.CompletedTask;
        }
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Physical\PhysicalDirectory.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Physical\PhysicalFile.cs ---
using CodeGenerator.FileSystem.Abstractions;

namespace CodeGenerator.FileSystem.Physical
{
    public class PhysicalFile : IFile
    {
        public string FileName { get; private set; }
        public string Extension => Path.GetExtension(FileName);
        public string FullPath { get; private set; }
        public string RelativePath { get; private set; }

        internal PhysicalFile(string fullPath, string relativePath)
        {
            FullPath = fullPath;
            RelativePath = relativePath;
            FileName = Path.GetFileName(fullPath);
        }

        public async Task RenameAsync(string newName)
        {
            string newPath = Path.Combine(Path.GetDirectoryName(FullPath)!, newName);
            File.Move(FullPath, newPath);
            FullPath = newPath;
            FileName = newName;
            RelativePath = Path.Combine(Path.GetDirectoryName(RelativePath) ?? "", newName);
            await Task.CompletedTask;
        }

        public async Task DeleteAsync()
        {
            if (File.Exists(FullPath))
                File.Delete(FullPath);
            await Task.CompletedTask;
        }
        public async Task<Stream> OpenReadAsync()
        {
            var fs = new FileStream(FullPath, FileMode.Open, FileAccess.Read, FileShare.Read, 4096, true);
            return await Task.FromResult(fs);
        }
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Physical\PhysicalFile.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\MergedProject.cs ---

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\Abstractions\IAssembly.cs ---
using CodeGenerator.FileSystem.Abstractions;
using System.Xml.Linq;

namespace CodeGenerator.Assembly.Abstractions
{
    public interface IAssembly : IDirectory
    {
        public string AssemblyName { get; }
        public XDocument Csproj { get; }
        public Task<XDocument> InitCsprojAsync(string targetFramework);
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\Abstractions\IAssembly.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\Abstractions\ICodeFile.cs ---
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace CodeGenerator.Assembly.Abstractions
{
    public interface ICodeFile
    {
        CompilationUnitSyntax CompilationUnit { get; }
        string ClassName { get; }
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\Abstractions\ICodeFile.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\Extensions\AssemblyExtensions.cs ---
using CodeGenerator.Assembly.Abstractions;
using CodeGenerator.FileSystem.Abstractions;

namespace CodeGenerator.Assembly.Extensions
{
    public static class AssemblyExtensions
    {
        public static async Task<IAssembly> CreateAssemblyAsync(
            this IDirectory parent,
            string assemblyName,
            string targetFramework = "net48")
        {
            var project = AssemblyProject.Create(parent.FullPath, assemblyName);
            await parent.AddDirectoryAsync(project.DirectoryName);
            return project;
        }
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\Extensions\AssemblyExtensions.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\obj\Debug\net9.0\.NETCoreApp,Version=v9.0.AssemblyAttributes.cs ---
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\obj\Debug\net9.0\.NETCoreApp,Version=v9.0.AssemblyAttributes.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\obj\Debug\net9.0\CodeGenerator.Assembly.AssemblyInfo.cs ---
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("CodeGenerator.Assembly")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("CodeGenerator.Assembly")]
[assembly: System.Reflection.AssemblyTitleAttribute("CodeGenerator.Assembly")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.


// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\obj\Debug\net9.0\CodeGenerator.Assembly.AssemblyInfo.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\obj\Debug\net9.0\CodeGenerator.Assembly.GlobalUsings.g.cs ---
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\obj\Debug\net9.0\CodeGenerator.Assembly.GlobalUsings.g.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\AssemblyProjectBase.cs ---
using CodeGenerator.Assembly.Abstractions;
using CodeGenerator.FileSystem.Abstractions;
using CodeGenerator.FileSystem.Physical;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using System.Xml.Linq;

namespace CodeGenerator.Assembly
{
    public abstract class AssemblyProjectBase : PhysicalDirectory, IAssembly
    {
        public IReadOnlyList<IFile> CsharpFiles => Files.Where(q => q.Extension == "cs").ToList().AsReadOnly();
        public string AssemblyName { get; private set; }
        public XDocument Csproj { get; private set; }

        protected AssemblyProjectBase(string fullPath, string relativePath, string assemblyName, XDocument csproj)
            : base(fullPath, relativePath)
        {
            AssemblyName = assemblyName;
            Csproj = csproj;
        }

        //public  static AssemblyProjectBase Create(string basePath, string assemblyName)
        //{
        //    var dir = CreateRoot(basePath, assemblyName);
        //    return new AssemblyProjectBase(dir.FullPath, dir.RelativePath, assemblyName);
        //}

        /// <summary>
        /// اضافه کردن کلاس جدید با namespace به صورت ساختاری و امن با Roslyn
        /// </summary>
        public async Task AddClassAsync(ICodeFile codeFile, string relativeFolder = "")
        {
            // ساخت فضای نام پایه: AssemblyName + فولدرهای زیرین (اگر بود)
            string namespaceName = AssemblyName;
            IDirectory directory = this;
            if (!string.IsNullOrEmpty(relativeFolder))
            {
                // نام فولدرها را تبدیل به فضای نام کن (مثلاً "Services/Helpers" => "Services.Helpers")
                var namespaceSuffix = relativeFolder.Replace(Path.DirectorySeparatorChar, '.').Replace(Path.AltDirectorySeparatorChar, '.');
                namespaceName += "." + namespaceSuffix;
                directory = await AddDirectoryAsync(relativeFolder);
            }

            // اصلاح فضای نام در CompilationUnitSyntax (فرض بر این است که فضای نام در AST باید جایگزین شود)
            var newNamespace = SyntaxFactory.NamespaceDeclaration(SyntaxFactory.ParseName(namespaceName))
                .WithMembers(codeFile.CompilationUnit.Members)
                .NormalizeWhitespace();

            var newCompilationUnit = SyntaxFactory.CompilationUnit()
                .AddMembers(newNamespace)
                .NormalizeWhitespace();

            string code = newCompilationUnit.ToFullString();

            // مسیر فایل در سیستم فایل:

            string fileName = codeFile.ClassName + ".cs";
            var file = await directory.AddFileAsync(fileName, code);

        }

        public abstract Task<XDocument> InitCsprojAsync(string targetFramework);

        ///// <summary>
        ///// ساخت فایل csproj به صورت XML ساختارمند با XDocument
        ///// </summary>
        //public async Task<XDocument> InitCsprojAsync(string targetFramework)
        //{
        //    var projectXml = new XDocument(
        //        new XElement("Project", new XAttribute("Sdk", "Microsoft.NET.Sdk"),
        //            new XElement("PropertyGroup",
        //                new XElement("TargetFramework", targetFramework),
        //    new XElement("AssemblyName", AssemblyName)
        //            )
        //        )
        //    );

        //    string csprojFileName = $"{AssemblyName}.csproj";
        //    string csprojFullPath = Path.Combine(FullPath, csprojFileName);
        //    MemoryStream stream = new MemoryStream();
        //    projectXml.Save(stream);

        //    await AddFileAsync(csprojFileName, stream);
        //}
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\AssemblyProjectBase.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\CodeFile.cs ---
using CodeGenerator.Assembly.Abstractions;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace CodeGenerator.Assembly
{
    public class CodeFile : ICodeFile
    {
        public CompilationUnitSyntax CompilationUnit { get; private set; }
        public string ClassName { get; private set; }

        public CodeFile(string className, CompilationUnitSyntax compilationUnit)
        {
            ClassName = className;
            CompilationUnit = compilationUnit;
        }
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly\CodeFile.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly.NetFx48\obj\Debug\net9.0\.NETCoreApp,Version=v9.0.AssemblyAttributes.cs ---
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly.NetFx48\obj\Debug\net9.0\.NETCoreApp,Version=v9.0.AssemblyAttributes.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly.NetFx48\obj\Debug\net9.0\CodeGenerator.Assembly.NetFx48.AssemblyInfo.cs ---
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("CodeGenerator.Assembly.NetFx48")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("CodeGenerator.Assembly.NetFx48")]
[assembly: System.Reflection.AssemblyTitleAttribute("CodeGenerator.Assembly.NetFx48")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.


// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly.NetFx48\obj\Debug\net9.0\CodeGenerator.Assembly.NetFx48.AssemblyInfo.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly.NetFx48\obj\Debug\net9.0\CodeGenerator.Assembly.NetFx48.GlobalUsings.g.cs ---
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly.NetFx48\obj\Debug\net9.0\CodeGenerator.Assembly.NetFx48.GlobalUsings.g.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly.NetFx48\AssemblyProject.cs ---
using System.Xml.Linq;

namespace CodeGenerator.Assembly.NetFx48
{
    public class AssemblyProject : AssemblyProjectBase
    {

        private AssemblyProject(string fullPath, string relativePath, string assemblyName)
            : base(fullPath, relativePath, assemblyName)
        {
        }

        public static AssemblyProject Create(string basePath, string assemblyName)
        {
            var dir = CreateRoot(basePath, assemblyName);
            return new AssemblyProject(dir.FullPath, dir.RelativePath, assemblyName);
        }

        public override async Task<XDocument> InitCsprojAsync(string targetFramework)
        {
            var projectXml = new XDocument(
               new XElement("Project", new XAttribute("Sdk", "Microsoft.NET.Sdk"),
                   new XElement("PropertyGroup",
                       new XElement("TargetFramework", targetFramework),
                       new XElement("AssemblyName", AssemblyName)
                   )
               )
           );

            string csprojFileName = $"{AssemblyName}.csproj";
            string csprojFullPath = Path.Combine(FullPath, csprojFileName);
            MemoryStream stream = new MemoryStream();
            projectXml.Save(stream);
            await AddFileAsync(csprojFileName, stream);
        }
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly.NetFx48\AssemblyProject.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly.NetFx48\Class1.cs ---
namespace CodeGenerator.Assembly.NetFx48
{
    public class Class1
    {

    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\CodeGenerator.Assembly.NetFx48\Class1.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\DataLayerGenerator\obj\Debug\net9.0\.NETCoreApp,Version=v9.0.AssemblyAttributes.cs ---
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\DataLayerGenerator\obj\Debug\net9.0\.NETCoreApp,Version=v9.0.AssemblyAttributes.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\DataLayerGenerator\obj\Debug\net9.0\DataLayerGenerator.AssemblyInfo.cs ---
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("DataLayerGenerator")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("DataLayerGenerator")]
[assembly: System.Reflection.AssemblyTitleAttribute("DataLayerGenerator")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.


// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\DataLayerGenerator\obj\Debug\net9.0\DataLayerGenerator.AssemblyInfo.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\DataLayerGenerator\obj\Debug\net9.0\DataLayerGenerator.GlobalUsings.g.cs ---
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\DataLayerGenerator\obj\Debug\net9.0\DataLayerGenerator.GlobalUsings.g.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\DataLayerGenerator\Program.cs ---
internal class Program
{
}




// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\DataLayerGenerator\Program.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Abstractions\IDirectory.cs ---
namespace CodeGenerator.FileSystem.Abstractions
{
    public interface IDirectory : IFullPath, IRelativePath
    {
        string DirectoryName { get; }
        IReadOnlyList<IDirectory> Directories { get; }
        IReadOnlyList<IFile> Files { get; }

        Task<IDirectory> AddDirectoryAsync(string name);
        Task<IFile> AddFileAsync(string name, string content);
        Task<IFile> AddFileAsync(string name, byte[] content);
        Task<IFile> AddFileAsync(string name, Stream content);

        Task RenameAsync(string newName);
        Task DeleteAsync();
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Abstractions\IDirectory.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Abstractions\IFile.cs ---
namespace CodeGenerator.FileSystem.Abstractions
{
    public interface IFile : IFullPath, IRelativePath
    {
        string FileName { get; }
        string Extension { get; }
        Task RenameAsync(string newName);
        Task DeleteAsync();
        Task<Stream> OpenReadAsync();
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Abstractions\IFile.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Abstractions\IFullPath.cs ---
namespace CodeGenerator.FileSystem.Abstractions
{
    public interface IFullPath
    {
        string FullPath { get; }
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Abstractions\IFullPath.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Abstractions\IRelativePath.cs ---
namespace CodeGenerator.FileSystem.Abstractions
{
    public interface IRelativePath
    {
        string RelativePath { get; }
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Abstractions\IRelativePath.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\obj\Debug\net9.0\.NETCoreApp,Version=v9.0.AssemblyAttributes.cs ---
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\obj\Debug\net9.0\.NETCoreApp,Version=v9.0.AssemblyAttributes.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\obj\Debug\net9.0\CodeGenerator.FileSystem.AssemblyInfo.cs ---
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("CodeGenerator.FileSystem")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("CodeGenerator.FileSystem")]
[assembly: System.Reflection.AssemblyTitleAttribute("CodeGenerator.FileSystem")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.


// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\obj\Debug\net9.0\CodeGenerator.FileSystem.AssemblyInfo.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\obj\Debug\net9.0\CodeGenerator.FileSystem.GlobalUsings.g.cs ---
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\obj\Debug\net9.0\CodeGenerator.FileSystem.GlobalUsings.g.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\obj\Debug\net9.0\FileSystem.AssemblyInfo.cs ---
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("FileSystem")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("FileSystem")]
[assembly: System.Reflection.AssemblyTitleAttribute("FileSystem")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.


// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\obj\Debug\net9.0\FileSystem.AssemblyInfo.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\obj\Debug\net9.0\FileSystem.GlobalUsings.g.cs ---
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\obj\Debug\net9.0\FileSystem.GlobalUsings.g.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Physical\PhysicalDirectory.cs ---
using CodeGenerator.FileSystem.Abstractions;

namespace CodeGenerator.FileSystem.Physical
{
    public class PhysicalDirectory : IDirectory
    {
        public string DirectoryName { get; private set; }
        public string FullPath { get; private set; }
        public string RelativePath { get; private set; }

        private readonly List<PhysicalDirectory> _directories = new();
        private readonly List<PhysicalFile> _files = new();

        public IReadOnlyList<IDirectory> Directories => _directories.AsReadOnly();
        public IReadOnlyList<IFile> Files => _files.AsReadOnly();

        protected PhysicalDirectory(string fullPath, string relativePath)
        {
            FullPath = fullPath;
            RelativePath = relativePath;
            DirectoryName = Path.GetFileName(fullPath);
        }

        // فقط یک ریشه ایجاد می‌کنیم، بعد زیر مجموعه‌ها از این ریشه ساخته می‌شوند
        public static PhysicalDirectory CreateRoot(string basePath, string rootDirectoryName)
        {
            string rootFullPath = Path.Combine(basePath, rootDirectoryName);
            Directory.CreateDirectory(rootFullPath);
            return new PhysicalDirectory(rootFullPath, rootDirectoryName);
        }

        // اضافه کردن فولدر زیر مجموعه
        public async Task<IDirectory> AddDirectoryAsync(string name)
        {
            string newFullPath = Path.Combine(FullPath, name);
            Directory.CreateDirectory(newFullPath);

            string newRelativePath = Path.Combine(RelativePath, name);
            var newDir = new PhysicalDirectory(newFullPath, newRelativePath);

            _directories.Add(newDir);
            await Task.CompletedTask;
            return newDir;
        }

        public async Task<IFile> AddFileAsync(string fileName, string content)
        {
            byte[] bytes = System.Text.Encoding.UTF8.GetBytes(content);
            return await AddFileAsync(fileName, bytes);
        }

        public async Task<IFile> AddFileAsync(string fileName, byte[] content)
        {
            string fullPath = Path.Combine(FullPath, fileName);
            await File.WriteAllBytesAsync(fullPath, content);
            return new PhysicalFile(FullPath, fileName);
        }

        public async Task<IFile> AddFileAsync(string fileName, Stream content)
        {
            string fullPath = Path.Combine(FullPath, fileName);
            using var fileStream = new FileStream(fullPath, FileMode.Create, FileAccess.Write, FileShare.None);
            await content.CopyToAsync(fileStream);
            return new PhysicalFile(FullPath, fileName);
        }

        public async Task RenameAsync(string newName)
        {
            string parentDir = Path.GetDirectoryName(FullPath) ?? throw new InvalidOperationException("Parent directory not found.");
            string newFullPath = Path.Combine(parentDir, newName);

            Directory.Move(FullPath, newFullPath);
            FullPath = newFullPath;
            DirectoryName = newName;
            RelativePath = Path.Combine(Path.GetDirectoryName(RelativePath) ?? "", newName);

            await Task.CompletedTask;
        }

        public async Task DeleteAsync()
        {
            if (Directory.Exists(FullPath))
                Directory.Delete(FullPath, true);

            await Task.CompletedTask;
        }
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Physical\PhysicalDirectory.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Physical\PhysicalFile.cs ---
using CodeGenerator.FileSystem.Abstractions;

namespace CodeGenerator.FileSystem.Physical
{
    public class PhysicalFile : IFile
    {
        public string FileName { get; private set; }
        public string Extension => Path.GetExtension(FileName);
        public string FullPath { get; private set; }
        public string RelativePath { get; private set; }

        internal PhysicalFile(string fullPath, string relativePath)
        {
            FullPath = fullPath;
            RelativePath = relativePath;
            FileName = Path.GetFileName(fullPath);
        }

        public async Task RenameAsync(string newName)
        {
            string newPath = Path.Combine(Path.GetDirectoryName(FullPath)!, newName);
            File.Move(FullPath, newPath);
            FullPath = newPath;
            FileName = newName;
            RelativePath = Path.Combine(Path.GetDirectoryName(RelativePath) ?? "", newName);
            await Task.CompletedTask;
        }

        public async Task DeleteAsync()
        {
            if (File.Exists(FullPath))
                File.Delete(FullPath);
            await Task.CompletedTask;
        }
        public async Task<Stream> OpenReadAsync()
        {
            var fs = new FileStream(FullPath, FileMode.Open, FileAccess.Read, FileShare.Read, 4096, true);
            return await Task.FromResult(fs);
        }
    }
}

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\FileSystem\Physical\PhysicalFile.cs

// --- START OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\MergedProject.cs ---

// --- END OF FILE: D:\Project\Data layer Rapco\DataLayerGenerator\DataLayerGenerator\MergedProject.cs

